import subprocess
import math

number_of_threads = max(int(subprocess.check_output("nproc", shell=True).decode().strip()),1)
number_of_threads_for_parallel_processes = max(math.floor(number_of_threads/4),1)
reference_genome_file_path = "/scratch/prj/sgdp_nanopore/Projects/09_structural_variant_benchmarking_dataset/longDnaScanMini/data/dataInput/referenceGenome/hg38.fa"

# snakemake -np data/qualityControl/dataInput/test_fastqc.html data/qualityControl/readFilteringAndTrimming/test_fastqc.html data/qualityControl/assemblyAndErrorCorrection/test.txt data/qualityControl/alignment/test.txt data/variantCalling/structuralVariants/test_cuteSV_simplified_combiSV.vcf
# snakemake --cores $(nproc) data/qualityControl/dataInput/test_fastqc.html data/qualityControl/readFilteringAndTrimming/test_fastqc.html data/qualityControl/assemblyAndErrorCorrection/test.txt data/qualityControl/alignment/test.txt data/variantCalling/structuralVariants/test_cuteSV_simplified_combiSV.vcf
# snakemake --dag data/qualityControl/dataInput/test_fastqc.html data/qualityControl/readFilteringAndTrimming/test_fastqc.html data/qualityControl/assemblyAndErrorCorrection/test.txt data/qualityControl/alignment/test.txt data/variantCalling/structuralVariants/test_cuteSV_simplified_combiSV.vcf | dot -Tsvg > dag.svg
rule all:
    input:
        "data/qualityControl/dataInput/{sample}_fastqc.html",
        "data/qualityControl/readFilteringAndTrimming/{sample}_fastqc.html",
        "data/qualityControl/assemblyAndErrorCorrection/{sample}.txt",
        "data/qualityControl/alignment/{sample}.txt",
        "data/variantCalling/structuralVariants/{sample}_cuteSV_simplified_combiSV.vcf"


# snakemake -np data/dataInput/fastq/test.fastq.gz
# snakemake --cores $(nproc) data/dataInput/fastq/test.fastq.gz
rule data_input:
    input:
        "data/dataInput/fastq/{sample}.fastq"
    output:
        "data/dataInput/fastq/{sample}.fastq.gz"
    threads:
        number_of_threads
    run:
        shell("pigz -p {threads} {input}")
 

# snakemake -np data/qualityControl/dataInput/test_fastqc.html
# snakemake --cores $(nproc) data/qualityControl/dataInput/test_fastqc.html
rule quality_control__data_input:
    input:
        "data/dataInput/fastq/{sample}.fastq.gz"
    params:
        "data/qualityControl/dataInput/"
    output:
        "data/qualityControl/dataInput/{sample}_fastqc.html"
    threads:
        number_of_threads
    shell:
        "fastqc {input} --outdir {params} -t {threads}"


# snakemake -np data/readFilteringAndTrimming/test.fastq.gz
# snakemake --cores $(nproc) data/readFilteringAndTrimming/test.fastq.gz
rule read_filtering_and_trimming:
    input:
        "data/dataInput/fastq/{sample}.fastq.gz"
    params:
        nanofilt_input_file = "data/readFilteringAndTrimming/{sample}_porechop.fastq",
        nanofilt_output_file = "data/readFilteringAndTrimming/{sample}.fastq"
    output:
        "data/readFilteringAndTrimming/{sample}.fastq.gz"
    threads:
        number_of_threads
    run:
        shell("porechop -i {input} -t {threads} | NanoFilt -l 500 --maxlength 100000 --logfile data/readFilteringAndTrimming/nanofiltLog.txt | pigz -p {threads} > {output}")

# snakemake -np data/qualityControl/readFilteringAndTrimming/all_fastqc.html
# snakemake --cores $(nproc) data/qualityControl/readFilteringAndTrimming/test_fastqc.html
rule quality_control__read_filtering_and_trimming:
    input:
        "data/readFilteringAndTrimming/{sample}.fastq.gz"
    params:
        "data/qualityControl/readFilteringAndTrimming/"
    output:
        "data/qualityControl/readFilteringAndTrimming/{sample}_fastqc.html"
    threads:
        number_of_threads
    shell:
        "fastqc {input} --outdir {params} -t {threads}"

# snakemake -np data/assembly/test.fasta.gz
# snakemake --cores $(nproc) data/assembly/test.fasta.gz
rule assembly_and_error_correction:
    input:
        "data/readFilteringAndTrimming/{sample}.fastq.gz"
    params:
        flye_output_file = "data/assembly/assembly.fasta",
        flye_output_path = "data/assembly/",
        flye_final_output_file  = "data/assembly/{sample}.fasta"
    output:
        "data/assembly/{sample}.fasta"
    threads:
        number_of_threads
    run:
        shell("if [ -d data/assembly/00-assembly ]",
        "then",
        "if [ -f data/assembly/00-assembly/test.fasta ]",
        "then",
        "flye --nano-raw {input} --out-dir {params.flye_output_path} -t {threads}",
        "else",
        "flye --nano-raw {input} --out-dir {params.flye_output_path} -t {threads} --resume",
        "fi",
        "else",
        "flye --nano-raw {input} --out-dir {params.flye_output_path} -t {threads}",
        "fi")
        shell("mv {params.flye_output_file} {params.flye_final_output_file}")

# snakemake -np data/qualityControl/assemblyAndErrorCorrection/test.txt
# snakemake --cores $(nproc) data/qualityControl/assemblyAndErrorCorrection/test.txt
rule quality_control__assembly:
    input:
        "data/assembly/{sample}.fasta"
    output:
        "data/qualityControl/assemblyAndErrorCorrection/{sample}.txt"
    threads:
        number_of_threads
    run:
        shell("assembly-stats {params} > {output}")


# snakemake -np data/alignment/test.bam
# snakemake --cores $(nproc) data/alignment/test.bam
rule alignment:
    input:
        "data/assembly/{sample}.fasta"
    params:
        minimap2_input_file = reference_genome_file_path,
        minimap2_output_file = "data/alignment/{sample}.sam",
        samtools_output_file = "data/alignment/{sample}.bam",

    output:
        "data/alignment/{sample}.bam"
    threads:
        number_of_threads
    run:
        shell("minimap2 --MD -ax map-ont -K 800000M -t {threads} {params.minimap2_input_file} {input} > {params.minimap2_output_file}")
        shell("samtools view --threads {threads} -bS {params.minimap2_output_file} > {params.samtools_output_file}")
        shell("samtools sort --threads {threads} -o {params.samtools_output_file} {params.samtools_output_file}")
        shell("samtools index -@ {threads} {params.samtools_output_file}")


# snakemake -np data/qualityControl/alignment/test.txt
# snakemake --cores $(nproc) data/qualityControl/alignment/test.txt
rule quality_control__aligment:
    input:
        "data/alignment/{sample}.bam"
    output:
        "data/qualityControl/alignment/{sample}.txt"
    threads:
        number_of_threads
    run:
        shell("samtools depth {input} > {output}")

# snakemake -np workflow/combiSV/
# snakemake --cores $(nproc) workflow/combiSV/
rule install_combiSV:
    params:
        "workflow/combiSV/"
    threads:
        number_of_threads
    output: 
        "workflow/combiSV/combiSV2.2.pl"
    run:
        shell("git clone https://github.com/ndierckx/combiSV.git {params}")

# snakemake -np data/variantCalling/structuralVariants/test_cutesv.vcf
# snakemake --cores $(nproc) data/variantCalling/structuralVariants/test_cutesv.vcf
rule variant_calling__structural_variants__cutesv:
    input:
        "data/alignment/{sample}.bam"
    params:
        reference_genome_file_path,
    threads:
        number_of_threads_for_parallel_processes
    output: 
        "data/variantCalling/structuralVariants/{sample}_cutesv.vcf"
    run:
        shell("cuteSV {input} {params} {output} . --threads {threads} --max_cluster_bias_INS 100 --diff_ratio_merging_INS 0.3 --max_cluster_bias_DEL 100 --diff_ratio_merging_DEL 0.3")


# snakemake -np data/variantCalling/structuralVariants/test_sniffles.vcf
# snakemake --cores $(nproc) data/variantCalling/structuralVariants/test_sniffles.vcf
rule variant_calling__structural_variants__sniffles:
    input:
        "data/alignment/{sample}.bam"
    params:
        reference_genome_file_path,
    threads:
        number_of_threads_for_parallel_processes
    output: 
        "data/variantCalling/structuralVariants/{sample}_sniffles.vcf",
    run:
        shell("sniffles -t {threads} -i {input} -v {output} --allow-overwrite")


# snakemake -np data/variantCalling/structuralVariants/test_svim.vcf
# snakemake --cores $(nproc) data/variantCalling/structuralVariants/test_svim.vcf
rule variant_calling__structural_variants__svim:
    input:
        "data/alignment/{sample}.bam"
    params:
        reference_genome_file_path,
    threads:
        1
    output: 
        "data/variantCalling/structuralVariants/{sample}_svim.vcf",
    run:
        shell("svim alignment data/data/variantCalling/structuralVariants/ {input} {params}")
        shell("mv data/data/variantCalling/structuralVariants/variants.vcf {output}")

# snakemake -np data/variantCalling/structuralVariants/test_nanovar.vcf
# snakemake --cores $(nproc) data/variantCalling/structuralVariants/test_nanovar.vcf
rule variant_calling__structural_variants__nanovar:
    input:
        "data/alignment/{sample}.bam"
    params:
        reference_genome_file_path,
    threads:
        1
    output: 
        "data/variantCalling/structuralVariants/{sample}_nanovar.vcf",
    run:
        shell("nanovar {input} {params} data/variantCalling/structuralVariants/ -t {threads} -x ont --debug --force")

# nanovar data/alignment/test.bam /scratch/prj/sgdp_nanopore/Projects/09_structural_variant_benchmarking_dataset/longDnaScanMini/data/dataInput/referenceGenome/hg38.fa data/variantCalling/structuralVariants/ -t 15 -x ont --debug

# snakemake -np data/variantCalling/structuralVariants/test_combiSV.vcf
# snakemake --cores $(nproc) data/variantCalling/structuralVariants/test_combiSV.vcf
rule variant_calling__structural_variants:
    input:
        cutesv_output_file = "data/variantCalling/structuralVariants/{sample}_cutesv.vcf",
        sniffles_output_file = "data/variantCalling/structuralVariants/{sample}_sniffles.vcf",
        svim_output_file = "data/variantCalling/structuralVariants/{sample}_svim.vcf"#,
        #nanovar_output_file = "data/variantCalling/structuralVariants/{sample}_nanovar.vcf"
    params:
        reference_genome_file = reference_genome_file_path,
    threads:
        number_of_threads
    output: 
        combisv_output_file = "data/variantCalling/structuralVariants/{sample}_combiSV.vcf",
        simplified_combisv_output_file = "data/variantCalling/structuralVariants/{sample}_simplified_combiSV.vcf",
        sniffles_combisv_output_file = "data/variantCalling/structuralVariants/{sample}_Sniffles_simplified_combiSV.vcf",
        cutesv_combisv_output_file = "data/variantCalling/structuralVariants/{sample}_cuteSV_simplified_combiSV.vcf",
        svim_combisv_output_file = "data/variantCalling/structuralVariants/{sample}_SVIM_simplified_combiSV"
    run:
        shell("perl workflow/combiSV/combiSV2.2.pl -sniffles {input.sniffles_output_file} -cutesv {input.cutesv_output_file} -svim {input.svim_output_file}") # -nanovar {input.nanovar_output_file}
        shell("mv combiSV.vcf {output.combisv_output_file}")
        shell("mv simplified_combiSV.vcf {output.simplified_combisv_output_file}")
        shell("mv Sniffles_simplified_combiSV.vcf {output.sniffles_combisv_output_file}")
        shell("mv cuteSV_simplified_combiSV.vcf {output.cutesv_combisv_output_file}")
        shell("mv SVIM_simplified_combiSV.vcf {output.svim_combisv_output_file}")