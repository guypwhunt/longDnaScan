
# snakemake -np data/readFilteringAndTrimming/fastq_runid_2fdae66b28c95c27857e236709f82e78094d4aac_0_0.fastq.gz
# snakemake --cores 1 data/readFilteringAndTrimming/fastq_runid_2fdae66b28c95c27857e236709f82e78094d4aac_0_0.fastq.gz
rule input_files__gzip:
    input:
        "data/input/fastq_runid_2fdae66b28c95c27857e236709f82e78094d4aac_0_0.fastq"
    params:
        "data/readFilteringAndTrimming/fastq_runid_2fdae66b28c95c27857e236709f82e78094d4aac_0_0.fastq"
    output:
        "data/readFilteringAndTrimming/fastq_runid_2fdae66b28c95c27857e236709f82e78094d4aac_0_0.fastq.gz"
    run:
        shell("cp -a {input} {params}")
        shell("gzip -q {params}")
 

# snakemake -np data/qualityControl/preReadFilteringAndTrimming/fastq_runid_2fdae66b28c95c27857e236709f82e78094d4aac_0_0_fastqc.html
# snakemake --cores 1 data/qualityControl/preReadFilteringAndTrimming/fastq_runid_2fdae66b28c95c27857e236709f82e78094d4aac_0_0_fastqc.html
rule quality_control_pre_read_filtering_and_trimming:
    input:
        read_file = "data/readFilteringAndTrimming/fastq_runid_2fdae66b28c95c27857e236709f82e78094d4aac_0_0.fastq.gz"
    params:
        outdir = "data/qualityControl/preReadFilteringAndTrimming/"
    output:
        read_quality_control_file = "data/qualityControl/preReadFilteringAndTrimming/fastq_runid_2fdae66b28c95c27857e236709f82e78094d4aac_0_0_fastqc.html"
    threads:
        1
    shell:
        "fastqc {input.read_file} --outdir {params.outdir} -t {threads}"


# snakemake -np data/readFilteringAndTrimming/all.fastq.gz
# snakemake --cores 1 data/readFilteringAndTrimming/all.fastq.gz
rule read_filtering_and_trimming:
    input:
        read_file = "data/readFilteringAndTrimming/fastq_runid_2fdae66b28c95c27857e236709f82e78094d4aac_0_0.fastq.gz"
    params:
        porechopfile = "data/readFilteringAndTrimming/fastq_runid_2fdae66b28c95c27857e236709f82e78094d4aac_0_0.fastq.gz",
        postporechopfile = "data/readFilteringAndTrimming/fastq_runid_2fdae66b28c95c27857e236709f82e78094d4aac_0_0.fastq",
        nanofilt = "data/readFilteringAndTrimming/all.fastq"
    output:
        nanofilt = "data/readFilteringAndTrimming/all.fastq.gz"
    threads:
        1
    run:
        shell("porechop -i {input.read_file} -o {params.porechopfile} --discard_middle -t {threads}")
        shell("gunzip -q {params.porechopfile}")
        shell("NanoFilt -l 500 --headcrop 10 --maxlength 100000 <{params.postporechopfile}> {params.nanofilt}")
        shell("gzip -q {params.nanofilt}")

# snakemake -np data/qualityControl/postReadFilteringAndTrimming/all_fastqc.html
# snakemake --cores 1 data/qualityControl/postReadFilteringAndTrimming/all_fastqc.html
rule quality_control_post_read_filtering_and_trimming:
    input:
        read_file = "data/readFilteringAndTrimming/all.fastq.gz"
    params:
        outdir = "data/qualityControl/postReadFilteringAndTrimming/"
    output:
        read_quality_control_file = "data/qualityControl/postReadFilteringAndTrimming/all_fastqc.html"
    threads:
        1
    shell:
        "fastqc {input.read_file} --outdir {params.outdir} -t {threads}"

# snakemake -np data/assembly/all.fasta.gz
# snakemake --cores 1 data/assembly/all.fasta.gz
rule assembly_and_error_correction:
    input:
        read_file = "data/readFilteringAndTrimming/all.fastq.gz"
    params:
        flyeFile = "data/assembly/assembly.fasta",
        flyePath = "data/assembly/",
        postflyeFile  = "data/assembly/all.fasta"
    output:
        nanofilt = "data/assembly/all.fasta.gz"
    threads:
        1
    run:
        shell("flye --nano-raw {input} --out-dir {params.flyePath} -t {threads}")
        shell("mv {params.flyeFile} {params.postflyeFile}")
        shell("gzip -q {params.postflyeFile}")

# snakemake -np data/qualityControl/postAssemblyErrorCorrection/assemblyStats.txt
# snakemake --cores 1 data/qualityControl/postAssemblyErrorCorrection/assemblyStats.txt
rule quality_control_post_assembly:
    input:
        read_file = "data/assembly/all.fasta.gz"
    params:
        gunzippedFile = "data/assembly/all.fasta"
    output:
        "data/qualityControl/postAssemblyErrorCorrection/assemblyStats.txt"
    threads:
        1
    run:
        shell("gunzip {input.read_file}")
        shell("assembly-stats {params.gunzippedFile} > {output}")
        shell("gzip -q {params.gunzippedFile}")

# snakemake -np data/alignment/all.bam
# snakemake --cores 1 data/alignment/all.bam
rule alignment:
    input:
        read_file = "data/assembly/all.fasta.gz"
    params:
        genomeReferencePath = "/scratch/prj/herv_project/UCSC_hg38/hg38.fa",
        sam = "data/alignment/all.sam",
        bam = "data/alignment/all.bam",

    output:
        "data/alignment/all.bam"
    threads:
        1
    run:
        shell("minimap2 --MD -ax map-ont -K 800000M -t {threads} {params.genomeReferencePath} {input} > {params.sam}")
        shell("samtools view --threads {threads} -bS {params.sam} > {params.bam}")
        shell("samtools sort --threads {threads} -o {params.bam} {params.bam}")
        shell("samtools index -@ {threads} {params.bam}")

# snakemake -np data/qualityControl/postAlignment/output.txt
# snakemake --cores 1 data/qualityControl/postAlignment/output.txt
rule quality_control_post_aligment:
    input:
        read_file = "data/alignment/all.bam"
    params:
        gunzippedFile = "data/assembly/all.fasta"
    output:
        "data/qualityControl/postAlignment/output.txt"
    threads:
        1
    run:
        shell("samtools depth {input.read_file} > {output}")


# snakemake -np workflow/combiSV/
# snakemake --cores 1 workflow/combiSV/
rule install_combiSV:
    params:
        "workflow/combiSV/"
    threads:
        1
    output: 
        "workflow/combiSV/combiSV2.2.pl"
    run:
        shell("git clone https://github.com/ndierckx/combiSV.git {params}")

# snakemake -np data/variantCalling/structuralVariants/cuteSV.vcf
# snakemake --cores 1 data/variantCalling/structuralVariants/cuteSV.vcf
rule variant_calling_structural_variants:
    input:
        bam = "data/alignment/all.bam",
        genomeReferencePath = "/scratch/prj/herv_project/UCSC_hg38/hg38.fa",
    threads:
        1
    output: 
        cuteSV = "data/variantCalling/structuralVariants/cuteSV.vcf",
        sniffles = "data/variantCalling/structuralVariants/sniffles.vcf",
        combiSV = "data/variantCalling/structuralVariants/combiSV.vcf"
    run:
        shell("cuteSV {input.bam} {input.genomeReferencePath} {output.cuteSV} . --threads {threads} --max_cluster_bias_INS 100 --diff_ratio_merging_INS 0.3 --max_cluster_bias_DEL 100 --diff_ratio_merging_DEL 0.3")
        shell("sniffles -t {threads} -i {input.bam} -v {output.sniffles} --allow-overwrite")
        shell("perl workflow/combiSV/combiSV2.2.pl -sniffles {output.sniffles} -cutesv {output.cuteSV}")
        shell("mv combiSV.vcf data/variantCalling/structuralVariants/combiSV.vcf")
        shell("mv simplified_combiSV.vcf data/variantCalling/structuralVariants/simplified_combiSV.vcf")
        shell("mv Sniffles_simplified_combiSV.vcf data/variantCalling/structuralVariants/Sniffles_simplified_combiSV.vcf")
        shell("mv cuteSV_simplified_combiSV.vcf data/variantCalling/structuralVariants/cuteSV_simplified_combiSV.vcf")